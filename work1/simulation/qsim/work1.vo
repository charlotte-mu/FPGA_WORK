// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 17.0.2 Build 602 07/19/2017 SJ Lite Edition"

// DATE "03/05/2018 10:33:22"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module top (
	dp,
	sw,
	led);
input 	[3:0] dp;
input 	[1:0] sw;
output 	led;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \led~output_o ;
wire \dp[2]~input_o ;
wire \sw[1]~input_o ;
wire \dp[1]~input_o ;
wire \sw[0]~input_o ;
wire \dp[0]~input_o ;
wire \Mux0~0_combout ;
wire \dp[3]~input_o ;
wire \Mux0~1_combout ;


cycloneive_io_obuf \led~output (
	.i(\Mux0~1_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\led~output_o ),
	.obar());
// synopsys translate_off
defparam \led~output .bus_hold = "false";
defparam \led~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \dp[2]~input (
	.i(dp[2]),
	.ibar(gnd),
	.o(\dp[2]~input_o ));
// synopsys translate_off
defparam \dp[2]~input .bus_hold = "false";
defparam \dp[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \sw[1]~input (
	.i(sw[1]),
	.ibar(gnd),
	.o(\sw[1]~input_o ));
// synopsys translate_off
defparam \sw[1]~input .bus_hold = "false";
defparam \sw[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \dp[1]~input (
	.i(dp[1]),
	.ibar(gnd),
	.o(\dp[1]~input_o ));
// synopsys translate_off
defparam \dp[1]~input .bus_hold = "false";
defparam \dp[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \sw[0]~input (
	.i(sw[0]),
	.ibar(gnd),
	.o(\sw[0]~input_o ));
// synopsys translate_off
defparam \sw[0]~input .bus_hold = "false";
defparam \sw[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \dp[0]~input (
	.i(dp[0]),
	.ibar(gnd),
	.o(\dp[0]~input_o ));
// synopsys translate_off
defparam \dp[0]~input .bus_hold = "false";
defparam \dp[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \Mux0~0 (
// Equation(s):
// \Mux0~0_combout  = (\sw[1]~input_o  & (((\sw[0]~input_o )))) # (!\sw[1]~input_o  & ((\sw[0]~input_o  & (!\dp[1]~input_o )) # (!\sw[0]~input_o  & ((!\dp[0]~input_o )))))

	.dataa(\sw[1]~input_o ),
	.datab(\dp[1]~input_o ),
	.datac(\sw[0]~input_o ),
	.datad(\dp[0]~input_o ),
	.cin(gnd),
	.combout(\Mux0~0_combout ),
	.cout());
// synopsys translate_off
defparam \Mux0~0 .lut_mask = 16'hB0B5;
defparam \Mux0~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \dp[3]~input (
	.i(dp[3]),
	.ibar(gnd),
	.o(\dp[3]~input_o ));
// synopsys translate_off
defparam \dp[3]~input .bus_hold = "false";
defparam \dp[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \Mux0~1 (
// Equation(s):
// \Mux0~1_combout  = (\sw[1]~input_o  & ((\Mux0~0_combout  & ((!\dp[3]~input_o ))) # (!\Mux0~0_combout  & (!\dp[2]~input_o )))) # (!\sw[1]~input_o  & (((\Mux0~0_combout ))))

	.dataa(\dp[2]~input_o ),
	.datab(\sw[1]~input_o ),
	.datac(\Mux0~0_combout ),
	.datad(\dp[3]~input_o ),
	.cin(gnd),
	.combout(\Mux0~1_combout ),
	.cout());
// synopsys translate_off
defparam \Mux0~1 .lut_mask = 16'h34F4;
defparam \Mux0~1 .sum_lutc_input = "datac";
// synopsys translate_on

assign led = \led~output_o ;

endmodule
