// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/19/2018 16:35:31"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          work5_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module work5_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CK;
reg ctrl;
reg RE;
// wires                                               
wire p;
wire Q0;
wire Q1;
wire Q2;
wire Q3;
wire Q4;
wire r;

// assign statements (if any)                          
work5_1 i1 (
// port map - connection between master ports and signals/registers   
	.CK(CK),
	.ctrl(ctrl),
	.p(p),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.Q4(Q4),
	.r(r),
	.RE(RE)
);
initial 
begin 
#1000000 $finish;
end 

// CK
always
begin
	CK = 1'b0;
	CK = #5000 1'b1;
	#5000;
end 

// ctrl
initial
begin
	ctrl = 1'b0;
	ctrl = #470000 1'b1;
end 

// RE
initial
begin
	RE = 1'b1;
	RE = #30000 1'b0;
	RE = #30000 1'b1;
end 
endmodule

