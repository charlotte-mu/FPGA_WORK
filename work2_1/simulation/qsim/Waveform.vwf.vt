// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/12/2018 11:23:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          work2_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module work2_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] dp;
reg [2:0] s;
reg [3:0] sw;
// wires                                               
wire led;

// assign statements (if any)                          
work2_1 i1 (
// port map - connection between master ports and signals/registers   
	.dp(dp),
	.led(led),
	.s(s),
	.sw(sw)
);
initial 
begin 
#1000000 $stop;
end 
// dp[ 3 ]
initial
begin
	dp[3] = 1'b0;
	dp[3] = #630000 1'b1;
	dp[3] = #10000 1'b0;
end 
// dp[ 2 ]
initial
begin
	dp[2] = 1'b0;
	dp[2] = #540000 1'b1;
	dp[2] = #10000 1'b0;
end 
// dp[ 1 ]
initial
begin
	dp[1] = 1'b0;
	dp[1] = #430000 1'b1;
	dp[1] = #30000 1'b0;
end 
// dp[ 0 ]
initial
begin
	dp[0] = 1'b0;
	dp[0] = #10000 1'b1;
	dp[0] = #20000 1'b0;
end 
// s[ 2 ]
initial
begin
	s[2] = 1'b0;
	s[2] = #400000 1'b1;
	s[2] = #400000 1'b0;
end 
// s[ 1 ]
initial
begin
	repeat(2)
	begin
		s[1] = 1'b0;
		s[1] = #200000 1'b1;
		# 200000;
	end
	s[1] = 1'b0;
end 
// s[ 0 ]
initial
begin
	repeat(4)
	begin
		s[0] = 1'b0;
		s[0] = #100000 1'b1;
		# 100000;
	end
	s[0] = 1'b0;
	s[0] = #190000 1'b1;
end 
// sw[ 3 ]
initial
begin
	repeat(12)
	begin
		sw[3] = 1'b0;
		sw[3] = #40000 1'b1;
		# 40000;
	end
	sw[3] = 1'b0;
end 
// sw[ 2 ]
always
begin
	sw[2] = 1'b0;
	sw[2] = #20000 1'b1;
	#20000;
end 
// sw[ 1 ]
always
begin
	sw[1] = 1'b0;
	sw[1] = #10000 1'b1;
	#10000;
end 
// sw[ 0 ]
always
begin
	sw[0] = 1'b0;
	sw[0] = #5000 1'b1;
	#5000;
end 
endmodule

