// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/19/2018 11:45:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          work3_2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module work3_2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a1;
reg a2;
reg a3;
reg b1;
reg b2;
reg b3;
reg cp;
// wires                                               
wire q1;
wire q2;
wire q3;

// assign statements (if any)                          
work3_2 i1 (
// port map - connection between master ports and signals/registers   
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.cp(cp),
	.q1(q1),
	.q2(q2),
	.q3(q3)
);
initial 
begin 
#1000000 $finish;
end 

// a3
initial
begin
	a3 = 1'b0;
	a3 = #630000 1'b1;
	a3 = #20000 1'b0;
end 

// a2
initial
begin
	a2 = 1'b0;
	a2 = #180000 1'b1;
	a2 = #50000 1'b0;
end 

// a1
initial
begin
	a1 = 1'b0;
end 

// b3
initial
begin
	b3 = 1'b0;
	b3 = #560000 1'b1;
	b3 = #30000 1'b0;
end 

// b2
initial
begin
	b2 = 1'b0;
	b2 = #180000 1'b1;
	b2 = #50000 1'b0;
	b2 = #330000 1'b1;
	b2 = #30000 1'b0;
end 

// b1
initial
begin
	b1 = 1'b0;
end 

// cp
initial
begin
	cp = 1'b0;
	cp = #210000 1'b1;
	cp = #10000 1'b0;
end 
endmodule

