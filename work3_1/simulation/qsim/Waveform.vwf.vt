// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/19/2018 11:03:18"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          work3_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module work3_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg cp;
reg r;
reg s;
// wires                                               
wire q;

// assign statements (if any)                          
work3_1 i1 (
// port map - connection between master ports and signals/registers   
	.cp(cp),
	.q(q),
	.r(r),
	.s(s)
);
initial 
begin 
#1000000 $finish;
end 

// cp
initial
begin
	cp = 1'b0;
	cp = #50000 1'b1;
	cp = #20000 1'b0;
	cp = #90000 1'b1;
	cp = #10000 1'b0;
	cp = #80000 1'b1;
	cp = #10000 1'b0;
end 

// s
initial
begin
	s = 1'b1;
	s = #130000 1'b0;
	s = #50000 1'b1;
end 

// r
initial
begin
	r = 1'b1;
	r = #240000 1'b0;
	r = #30000 1'b1;
end 
endmodule

