// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 17.0.2 Build 602 07/19/2017 SJ Lite Edition"

// DATE "06/14/2018 10:16:35"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module fsm (
	C,
	ck,
	ctrl,
	A,
	B);
output 	C;
input 	ck;
input 	ctrl;
output 	A;
output 	B;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \C~output_o ;
wire \A~output_o ;
wire \B~output_o ;
wire \ck~input_o ;
wire \ctrl~input_o ;
wire \inst4|inst2~0_combout ;
wire \inst1~q ;
wire \inst2~0_combout ;
wire \inst2~q ;
wire \inst100|inst2~0_combout ;
wire \inst~q ;


cycloneive_io_obuf \C~output (
	.i(\inst~q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\C~output_o ),
	.obar());
// synopsys translate_off
defparam \C~output .bus_hold = "false";
defparam \C~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \A~output (
	.i(\inst2~q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\A~output_o ),
	.obar());
// synopsys translate_off
defparam \A~output .bus_hold = "false";
defparam \A~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \B~output (
	.i(\inst1~q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\B~output_o ),
	.obar());
// synopsys translate_off
defparam \B~output .bus_hold = "false";
defparam \B~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \ck~input (
	.i(ck),
	.ibar(gnd),
	.o(\ck~input_o ));
// synopsys translate_off
defparam \ck~input .bus_hold = "false";
defparam \ck~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \ctrl~input (
	.i(ctrl),
	.ibar(gnd),
	.o(\ctrl~input_o ));
// synopsys translate_off
defparam \ctrl~input .bus_hold = "false";
defparam \ctrl~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst4|inst2~0 (
// Equation(s):
// \inst4|inst2~0_combout  = \inst~q  $ (\ctrl~input_o  $ (((\inst1~q ) # (!\inst2~q ))))

	.dataa(\inst~q ),
	.datab(\ctrl~input_o ),
	.datac(\inst1~q ),
	.datad(\inst2~q ),
	.cin(gnd),
	.combout(\inst4|inst2~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst4|inst2~0 .lut_mask = 16'h9699;
defparam \inst4|inst2~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas inst1(
	.clk(\ck~input_o ),
	.d(\inst4|inst2~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst1~q ),
	.prn(vcc));
// synopsys translate_off
defparam inst1.is_wysiwyg = "true";
defparam inst1.power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \inst2~0 (
// Equation(s):
// \inst2~0_combout  = \inst2~q  $ (((\inst~q  $ (\ctrl~input_o )) # (!\inst1~q )))

	.dataa(\inst1~q ),
	.datab(\inst~q ),
	.datac(\ctrl~input_o ),
	.datad(\inst2~q ),
	.cin(gnd),
	.combout(\inst2~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst2~0 .lut_mask = 16'h827D;
defparam \inst2~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas inst2(
	.clk(\ck~input_o ),
	.d(\inst2~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst2~q ),
	.prn(vcc));
// synopsys translate_off
defparam inst2.is_wysiwyg = "true";
defparam inst2.power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \inst100|inst2~0 (
// Equation(s):
// \inst100|inst2~0_combout  = \inst1~q  $ (((\inst2~q  & ((\ctrl~input_o ))) # (!\inst2~q  & (\inst~q ))))

	.dataa(\inst2~q ),
	.datab(\inst~q ),
	.datac(\ctrl~input_o ),
	.datad(\inst1~q ),
	.cin(gnd),
	.combout(\inst100|inst2~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst100|inst2~0 .lut_mask = 16'h1BE4;
defparam \inst100|inst2~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas inst(
	.clk(\ck~input_o ),
	.d(\inst100|inst2~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst~q ),
	.prn(vcc));
// synopsys translate_off
defparam inst.is_wysiwyg = "true";
defparam inst.power_up = "low";
// synopsys translate_on

assign C = \C~output_o ;

assign A = \A~output_o ;

assign B = \B~output_o ;

endmodule
