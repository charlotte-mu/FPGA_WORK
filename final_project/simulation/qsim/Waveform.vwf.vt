// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/21/2018 11:50:13"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          finalproject
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module finalproject_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ck;
reg clr;
reg ctrl;
reg KEY1;
reg KEY2;
reg stop;
reg SW2;
reg SW3;
reg SW4;
reg SW5;
reg SW6;
reg SW7;
reg SW8;
reg SW9;
// wires                                               
wire [6:0] L3bit_L0;
wire [6:0] L4bit_L0;
wire [6:0] L4bit_L1;
wire [6:0] L5bit_L0;
wire [6:0] L5bit_L1;
wire LEDG0;
wire LEDG1;
wire LEDG2;
wire LEDR0;
wire LEDR1;
wire LEDR2;
wire LEDR3;
wire LEDR4;

// assign statements (if any)                          
finalproject i1 (
// port map - connection between master ports and signals/registers   
	.ck(ck),
	.clr(clr),
	.ctrl(ctrl),
	.KEY1(KEY1),
	.KEY2(KEY2),
	.L3bit_L0(L3bit_L0),
	.L4bit_L0(L4bit_L0),
	.L4bit_L1(L4bit_L1),
	.L5bit_L0(L5bit_L0),
	.L5bit_L1(L5bit_L1),
	.LEDG0(LEDG0),
	.LEDG1(LEDG1),
	.LEDG2(LEDG2),
	.LEDR0(LEDR0),
	.LEDR1(LEDR1),
	.LEDR2(LEDR2),
	.LEDR3(LEDR3),
	.LEDR4(LEDR4),
	.stop(stop),
	.SW2(SW2),
	.SW3(SW3),
	.SW4(SW4),
	.SW5(SW5),
	.SW6(SW6),
	.SW7(SW7),
	.SW8(SW8),
	.SW9(SW9)
);
initial 
begin 
#20000000 $finish;
end 

// ck
always
begin
	ck = 1'b0;
	ck = #10000 1'b1;
	#10000;
end 

// stop
initial
begin
	stop = 1'b0;
	stop = #200000 1'b1;
	stop = #200000 1'b0;
end 

// ctrl
initial
begin
	ctrl = 1'b0;
end 

// clr
initial
begin
	clr = 1'b0;
end 

// KEY1
initial
begin
	KEY1 = 1'b0;
end 

// KEY2
initial
begin
	KEY2 = 1'b0;
end 

// SW2
initial
begin
	SW2 = 1'b0;
end 

// SW3
initial
begin
	SW3 = 1'b0;
end 

// SW4
initial
begin
	SW4 = 1'b0;
end 

// SW5
initial
begin
	SW5 = 1'b0;
end 

// SW6
initial
begin
	SW6 = 1'b0;
end 

// SW7
initial
begin
	SW7 = 1'b0;
end 

// SW8
initial
begin
	SW8 = 1'b0;
end 

// SW9
initial
begin
	SW9 = 1'b0;
end 
endmodule

